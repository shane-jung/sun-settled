// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?   @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Garden {
  id          String       @id @default(cuid())
  name        String
  capacityDc  Float        @default(0) @map("capacity_dc")
  description String?
  subscribers Subscriber[]
  readings    Reading[]
  billingJobs BillingJob[]
}

model Reading {
  id        String   @id @default(cuid())
  gardenId  String   @map("garden_id")
  garden    Garden   @relation(fields: [gardenId], references: [id])
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  inputDate DateTime @map("input_date")
  value     Float
}

model Subscriber {
  id                 String            @id @default(cuid())
  stripeCustomerId   String?           @map("stripe_customer_id")
  name               String
  email              String
  allocation         Float             @default(0)
  gardenId           String            @default("1") @map("garden_id")
  garden             Garden            @relation(fields: [gardenId], references: [id])
  SubscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?           @map("subscription_plan_id")
}

model BillingJob {
  id                 String           @id @default(cuid())
  name               String
  gardenId           String           @map("garden_id")
  subscriptionPlanId String           @map("subscription_plan_id")
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  garden             Garden           @relation(fields: [gardenId], references: [id])
  startDate          DateTime         @map("start_date")
  endDate            DateTime         @map("end_date")
  scheduleArn        String           @map("schedule_arn")
}

model SubscriptionPlan {
  id                    String       @id @default(cuid())
  name                  String
  description           String?
  billingFrequency      String       @map("billing_frequency")
  isShareDependent      Boolean      @map("is_share_dependent")
  isProductionDependent Boolean      @map("is_production_dependent")
  rate                  Float
  rateIncrease          Float        @map("rate_increase")
  subscribers           Subscriber[]
  BillingJob            BillingJob[]
}
